
# Just using for tests, I'll change this
class MutantTask < Fudge::Tasks::Task
  def self.name
    :mutant
  end

  def run(p)
    out = false
    classes.each do |c|
      out = system("RAILS_ENV=test bundle exec mutant -r ./config/environment --use rspec #{c}")
      break unless out
    end
    out
  end

  def classes
    return @classes unless @classes.nil?
    @classes = []

    classes = Dir['app/models/*.rb', 'app/controllers/*.rb'].map { |path| path.match(/(\w+).rb/); $1 }.compact 
    classes.each do |c|
      @classes <<  camelize(c)
    end
    puts @classes.inspect
    @classes
  end

  def camelize(string)
    mod_string = ''
    string.split('_').each do |part|
      mod_string += "#{part[0].upcase}#{part[1..-1]}"
    end
    mod_string
  end
end

class RuboCopTask < Fudge::Tasks::Task
  def self.name
    :rubocop
  end

  def run(p)
    system('rubocop')
  end

  def check_for
    [/(\d+) offenses detected/, lambda { |n| n.to_i >= 0 }]
  end

  def classes
    return @classes unless @classes.nil?
    @classes = []

    classes = Dir['app/models/*.rb', 'app/controllers/*.rb'].map { |path| path.match(/(\w+).rb/); $1 }.compact 
    classes.each do |c|
      @classes <<  camelize(c)
    end
    puts @classes.inspect
    @classes
  end

  def camelize(string)
    mod_string = ''
    string.split('_').each do |part|
      mod_string += "#{part[0].upcase}#{part[1..-1]}"
    end
    mod_string
  end
end

Fudge::Tasks.register(MutantTask)
Fudge::Tasks.register(RuboCopTask)

ignore_files = %w{
  lib/nfes/amendments/xml
  lib/nfes/xml/exporter
  lib/nfes/xml/importer
  lib/admin_reports
}

ignore_files = ignore_files.join('|')

ignore = "^\.\/(spec|db|config|#{ignore_files})\/"

task_group :quality_assurance do
  # yard 'stats --list-undoc', :coverage => 100
  cane :max_width => 141, :exclude  => ignore
  task :flay, :exclude => ignore
  task :flog, :exclude => ignore, :methods => true
  task :brakeman, :max => 2
end

task_group :setup_env do
	clean_bundler_env do
	 shell 'bundle install'
	end

	clean_bundler_env do
	  rake 'db:drop RAILS_ENV=test'
	  rake 'db:setup RAILS_ENV=test'
	end
end

task_group :mutant do
  clean_bundler_env do
    mutant 
  end
end

task_group :rubocop do
  clean_bundler_env do
    rubocop
  end
end

task_group :rspec do
  clean_bundler_env do
    rspec :coverage => 100
  end
end

build :default do
  task_group :setup_env, :exclude => ignore
  task_group :rubocop
  task_group :quality_assurance, :exclude => ignore
  task_group :rspec, :exclude => ignore
  task_group :mutant
end

build :specs do
  task_group :setup_env

  task_group :rspec
end

build :quality_assurance do
  task_group :quality_assurance
end

build :flog do
  task :flog, :exclude => ignore, :methods => true
end




